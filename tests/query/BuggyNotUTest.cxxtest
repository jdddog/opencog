/*
 * tests/query/BuggyNotUTest.cxxtest
 *
 * Copyright (C) 2009, 2013 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/query/DefaultPatternMatchCB.h>
#include <opencog/query/PatternMatch.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class BuggyNot :  public CxxTest::TestSuite
{
	private:
		PatternMatch pm;
		AtomSpace *as;
		static const char* paths[];

	public:

		BuggyNot(void)
		{
			try
			{
				config().load("opencog-test.conf");
			}
			catch (RuntimeException &e)
			{
				std::cerr << e.getMessage() << std::endl;
			}
			logger().setFilename(config()["LOG_FILE"]);
			logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
			logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

			// logger().setLevel(Logger::DEBUG);
			// logger().setPrintToStdoutFlag(true);

			server(CogServer::createInstance);
			as = &cogserver().getAtomSpace();
			pm.set_atomspace(as);

			// Load the required data
			config().set("MODULES",
				"opencog/nlp/types/libnlp-types.so, "
				"opencog/dynamics/attention/libattention-types.so, "
				"opencog/embodiment/AtomSpaceExtensions/libembodiment-types.so");

			cogserver().loadModules(paths);


		}

		~BuggyNot()
		{
			// Erase the log file if no assertions failed.
			if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
		}

		void setUp(void);

		void tearDown(void) { }

		void test_bugnot(void);
};

const char* BuggyNot::paths[] =
	{
		"./",
		"../",
		"../../",
		"../../../",
		NULL
	};


/*
 * This function sets up an implication link, and some data.
 */
#define an as->addNode
#define al as->addLink
void BuggyNot::setUp(void)
{
	as->clear();

	config().set("SCM_PRELOAD",
		"opencog/atomspace/core_types.scm, "
		"opencog/nlp/types/nlp_types.scm, "
		"opencog/spacetime/spacetime_types.scm, "
		"opencog/dynamics/attention/attention_types.scm, "
		"opencog/embodiment/AtomSpaceExtensions/embodiment_types.scm");

	// Blindly search a bunch of paths hoping to find the files
	// in one of them ...
	load_scm_files_from_config(*as, paths);
}

#define getlink(hand,pos) as->getOutgoing(hand,pos)
#define getarity(hand) as->getArity(hand)

/*
 * NotLink causing weird trouble.
 */
void BuggyNot::test_bugnot(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	config().set("SCM_PRELOAD", "tests/query/buggy-not.scm");
	load_scm_files_from_config(*as, paths);

	// Create an implication link that will be tested.
	SchemeEval* eval = new SchemeEval();
	Handle same_rule = eval->apply("is-same-rule", Handle::UNDEFINED);
	Handle trans_rule = eval->apply("transitive-rule", Handle::UNDEFINED);
	delete eval;

	// Make sure the scheme file actually loaded!
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != same_rule);
	TSM_ASSERT("Failed to load test data", Handle::UNDEFINED != trans_rule);

	// First, deduce if two seemingly different people are the same ...
	Handle same = pm.crisp_logic_bindlink(same_rule);
	logger().debug("Same-people list is %s\n", SchemeSmob::to_string(same).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 4, getarity(same));

	// Next, deduce that the same properties apply to each person.
	// The bug that this test used to trip had to do with using the same
	// "pm" twice, to perform a second round of matching. It failed to
	// clear all internal state, and in particular, failed to clear the
	// "NotLink" in the optional match.  As a result, the second implication
	// failed, because it was still using a left-over portion of the previous
	// implication link. This was a rather distressing bug ... a very obvious
	// but poor bug, and hadn't been noticed before. Alas.
	Handle trans = pm.crisp_logic_bindlink(trans_rule);
	logger().debug("Transitive list is %s\n", SchemeSmob::to_string(trans).c_str());
	TSM_ASSERT_EQUALS("wrong number of solutions found", 4, getarity(trans));

	logger().debug("END TEST: %s", __FUNCTION__);
}

